"use strict";
/*
 * Copyright Splunk Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureLogInjection = exports.defaultLogHook = void 0;
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const defaultLogHook = (span, record) => {
    record['service.name'] =
        span.resource.attributes[semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME];
    const version = span.resource.attributes[semantic_conventions_1.SemanticResourceAttributes.SERVICE_VERSION];
    if (version !== undefined) {
        record['service.version'] = version;
    }
    const environment = span.resource.attributes[semantic_conventions_1.SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT];
    if (environment !== undefined) {
        record['service.environment'] = environment;
    }
};
exports.defaultLogHook = defaultLogHook;
function configureLogInjection(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
instrumentation) {
    if (typeof instrumentation['setConfig'] !== 'function' ||
        typeof instrumentation['getConfig'] !== 'function') {
        return;
    }
    const config = instrumentation.getConfig();
    if (config === undefined) {
        return instrumentation.setConfig({ logHook: exports.defaultLogHook });
    }
    if (config.logHook === undefined) {
        config.logHook = exports.defaultLogHook;
        return instrumentation.setConfig(config);
    }
}
exports.configureLogInjection = configureLogInjection;
//# sourceMappingURL=logging.js.map