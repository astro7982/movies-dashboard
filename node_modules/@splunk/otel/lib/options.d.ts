import { SpanExporter, SpanProcessor } from '@opentelemetry/sdk-trace-base';
import { InstrumentationOption } from '@opentelemetry/instrumentation';
import { NodeTracerConfig } from '@opentelemetry/sdk-trace-node';
import { Span, TextMapPropagator } from '@opentelemetry/api';
declare type SpanExporterFactory = (options: Options) => SpanExporter;
declare type SpanProcessorFactory = (options: Options) => SpanProcessor | SpanProcessor[];
declare type PropagatorFactory = (options: Options) => TextMapPropagator;
export declare type CaptureHttpUriParameters = (span: Span, params: Record<string, string | string[] | undefined>) => void;
export interface Options {
    endpoint?: string;
    serviceName: string;
    accessToken: string;
    serverTimingEnabled: boolean;
    instrumentations: InstrumentationOption[];
    tracerConfig: NodeTracerConfig;
    spanExporterFactory: SpanExporterFactory;
    spanProcessorFactory: SpanProcessorFactory;
    propagatorFactory: PropagatorFactory;
    captureHttpRequestUriParams: string[] | CaptureHttpUriParameters;
}
export declare function _setDefaultOptions(options?: Partial<Options>): Options;
export declare function resolveTracesExporter(): SpanExporterFactory;
export declare function otlpSpanExporterFactory(options: Options): SpanExporter;
export declare const jaegerSpanExporterFactory: (options: Options) => SpanExporter;
export declare const splunkSpanExporterFactory: (options: Options) => SpanExporter;
export declare function defaultSpanProcessorFactory(options: Options): SpanProcessor;
export declare function defaultPropagatorFactory(options: Options): TextMapPropagator;
export {};
//# sourceMappingURL=options.d.ts.map